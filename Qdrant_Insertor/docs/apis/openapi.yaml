openapi: 3.0.0
info:
  title: RAG System API
  version: 1.0.0
  description: API for Document-level RAG Retrieval System with Knowledge Graph capabilities.
servers:
  - url: /api
    description: Local Development Server

paths:
  /health:
    get:
      summary: Health check
      description: Simple health check endpoint to verify API is running.
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true

  /healthz:
    get:
      summary: Detailed health check
      description: Detailed health check with service status information.
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['ok', 'degraded', 'unhealthy']
                  qdrant:
                    type: string
                    enum: ['ok', 'unhealthy']
                  sqlite:
                    type: string
                    enum: ['ok', 'unhealthy']
        '503':
          description: Service Unavailable

  /metrics:
    get:
      summary: Prometheus metrics endpoint
      responses:
        '200':
          description: Prometheus metrics in exposition format
          content:
            text/plain:
              schema:
                type: string

  /upload:
    $ref: './paths/upload.yaml#/upload'

  /collections/{collectionId}/docs:
    $ref: './paths/documents.yaml#/uploadToCollection'

  /docs:
    $ref: './paths/documents.yaml#/listDocs'

  /docs/{docId}:
    $ref: './paths/documents.yaml#/docById'

  /docs/{docId}/resync:
    $ref: './paths/documents.yaml#/resyncDoc'

  /docs/{docId}/extract-graph:
    $ref: './paths/documents.yaml#/extractGraph'

  /collections:
    $ref: './paths/collections.yaml#/collections'

  /collections/{collectionId}:
    $ref: './paths/collections.yaml#/collectionById'

  /search:
    $ref: './paths/search.yaml#/search'

components:
  schemas:
    CollectionResponse:
      $ref: './components/schemas/collection.yaml#/CollectionResponse'
    CreateCollectionRequest:
      $ref: './components/schemas/collection.yaml#/CreateCollectionRequest'
    UpdateCollectionRequest:
      $ref: './components/schemas/collection.yaml#/UpdateCollectionRequest'
    DocumentResponse:
      $ref: './components/schemas/document.yaml#/DocumentResponse'
    UploadDocumentResponse:
      $ref: './components/schemas/document.yaml#/UploadDocumentResponse'
    ChunkDTO:
      $ref: './components/schemas/document.yaml#/ChunkDTO'
    RetrievalResultDTO:
      $ref: './components/schemas/search.yaml#/RetrievalResultDTO'
    ErrorResponse:
      $ref: './components/schemas/error.yaml#/ErrorResponse'

  responses:
    ValidationError:
      $ref: './components/responses/common.yaml#/ValidationError'
    NotFoundError:
      $ref: './components/responses/common.yaml#/NotFoundError'
    InternalServerError:
      $ref: './components/responses/common.yaml#/InternalServerError'
    FileTooLargeError:
      $ref: './components/responses/common.yaml#/FileTooLargeError'
