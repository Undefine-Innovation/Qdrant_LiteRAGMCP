openapi: 3.0.0
info:
  title: RAG System API
  version: 1.0.0
  description: API for Document-level RAG Retrieval System with Knowledge Graph capabilities.
servers:
  - url: /api
    description: Local Development Server
paths:
  /upload:
    post:
      summary: Upload a document
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload.
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  docId:
                    type: string
                    description: The ID of the uploaded document.
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /doc/{id}:
    delete:
      summary: Delete a document
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the document to delete.
      responses:
        '204':
          description: Document deleted successfully
        '404':
          description: Document not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /doc/{id}/chunks:
    get:
      summary: Get document chunks
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the document.
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of chunks per page.
      responses:
        '200':
          description: List of document chunks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChunkDTO'
        '404':
          description: Document not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /search:
    get:
      summary: Search for documents
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: The search query.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Maximum number of results to return.
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrievalResultDTO'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /healthz:
    get:
      summary: Health check
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ "ok", "degraded", "unhealthy" ]
                  qdrant:
                    type: string
                    enum: [ "ok", "unhealthy" ]
                  sqlite:
                    type: string
                    enum: [ "ok", "unhealthy" ]
        '503':
          description: Service Unavailable
  /metrics:
    get:
      summary: Prometheus metrics endpoint
      responses:
        '200':
          description: Prometheus metrics in exposition format
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    ChunkDTO:
      type: object
      properties:
        pointId:
          type: string
        docId:
          type: string
        versionId:
          type: string
        collectionId:
          type: string
        chunkIndex:
          type: integer
        titleChain:
          type: string
        content:
          type: string
        contentHash:
          type: string
    RetrievalResultDTO:
      type: object
      properties:
        type:
          type: string
          enum: [ "chunkResult", "graphResult" ]
        score:
          type: number
          format: float
        content:
          type: string
        metadata:
          type: object
          additionalProperties: true
  responses:
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: VALIDATION_ERROR
                  message:
                    type: string
                    example: "field 'q' is required"
                  details:
                    type: object
                    additionalProperties: true
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: "An unexpected error occurred."